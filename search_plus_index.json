{"./":{"url":"./","title":"博客总揽","keywords":"","body":"简介 教程分享均是笔者亲身学习经验总结,涉及到的知识点均亲身试验,但有时为了知识完整性,可能并未亲自确认,希望能及时反馈,避免更多人踩坑. 主要内容 闲置主机搭建双系统搭建ubuntu server 并搭建单机k8s,gitlab 实现简易版devops(CICD)做开发服务器 通过frp暴露到公网 可以 随时随地提交代码并发布服务 用阿里云最便宜的服务器做中转(1cpu1g 突发即可 网络按使用 不到30/月) 而你本地主机却可以随时按需扩展和随意开关机 作者闲置主机扩展到了24G内存 本身还有200多G固态 1T机械 按这配置1年起码至少得3000起 如果做服务器 显卡就鸡肋了 如果专门做服务器 买个垃圾显卡或者DIY的 3000可以拥有很高的配置了 虽然需要你部署研究 长久上 做开发 简单服务还是这个方案便宜目录 闲置主机做开发服务器 搭建ubuntu server及其k8s 搭建gitlab并使用CICD部署HelloWorld 使用frp代理本地机器到公网 gitea替换gitlab部署CICD spring-data-mybatis-mini极简ORM var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: https://vonchange.github.io/ 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-08 15:54:40 "},"doc/host/ubuntu.html":{"url":"doc/host/ubuntu.html","title":"搭建ubuntu server及其k8s","keywords":"","body":"搭建ubuntu server及其k8s 搭建ubuntu server 参考: https://www.jianshu.com/p/da49cd69e8ff 我已经安装过了 没留啥文档 基本按照安装ubuntu server参考安装即可 这里只说自己踩过的坑 我安装的版本是 ubuntu server 16.04.6 安装语言必须选择English 也就是第一个安装界面 但在 \"Welcome\" 语言选择界面可以选择中文(只是安装界面的语言) 但第一个我尝试过选择中文 是有问题 当然能力足够最好都选择英文 双系统 磁盘分区选择手动 选择一个你预备好的非系统ntfs盘(在win10里最好格式化过) 删除此分区变为空闲分区 选择该空闲分区自动分区 确定执行 搭建 本地k8s准备工作 必须安装了ssh 安装的ubuntu的时候可选 没选也简单 自己安装即可 sudo ps -e |grep ssh # 查看时候安装过 apt-get update apt-get install openssh-server # 不存在 安装 必须创建root用户 sudo passwd root # 设置root的密码 su root #来测试是否可以进入root用户，如果出现#说明已经设置root用户的密码成功 必须设置ssh root用户可以登录(默认没有开启) # 其配置在 sshd_config文件中，进行编辑： vi /etc/ssh/sshd_config #找到PermitRootLogin 添加一行 PermitRootLogin yes，如下： # Authentication: #LoginGraceTime 2m #PermitRootLogin prohibit-password PermitRootLogin yes #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 #保存退出后，重启ssh服务，输入命令： /etc/init.d/ssh restart ifconfig 查看ip 这里推荐使用secureCRT(secureFX) ssh root登录 准本就绪 可以安装k8s了 搭建 本地k8s（懒人法) 搭建k8s网上有多种 比如kubeadmin 但因为墙的问题 需要爬许多坑 这里推荐使用：kubeasz 里面文档也很丰富清晰，对于初学者来说很有帮助。最主要的是不需要翻墙 我主要拿 主机做开发服务器 只有一个服务器 也就是只有master 所以选择最简单的 单机快速体验k8s集群的测试环境--AllinOne部署 安装上面教程安装即可 很简单 但前提必须ssh root能登录(没开之前 老是安装不上) 还有先不要着急安装 我安装后发现一个问题 [使用2.0.3版本后，在dashboard中看不到CPU、MEM]https://github.com/easzlab/kubeasz/issues/666 在教程AllinOne部署2.下载文件后 服务器上提前在roles/kube-node/templates/kubelet-config.yaml.j2文件中把 readOnlyPort: 0 改成 readOnlyPort: 10255 再执行部署 现在你已经安装好了k8s 可以动手各种kubectl命令 好记性不如烂笔头 正在的动手学习k8s var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: https://vonchange.github.io/doc/host/ubuntu.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-08 14:57:23 "},"doc/host/gitlab-ci.html":{"url":"doc/host/gitlab-ci.html","title":"搭建gitlab并使用CICD部署HelloWorld","keywords":"","body":"搭建gitlab并使用CICD部署HelloWorld var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: https://vonchange.github.io/doc/host/gitlab-ci.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-08 15:03:34 "},"doc/host/frp.html":{"url":"doc/host/frp.html","title":"使用frp代理本地机器到公网","keywords":"","body":"使用frp代理本地机器到公网 var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: https://vonchange.github.io/doc/host/frp.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-08 15:31:18 "},"doc/host/gitea.html":{"url":"doc/host/gitea.html","title":"gitea替换gitlab部署CICD","keywords":"","body":"使用轻量级gitee替换gitlab部署CICD var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: https://vonchange.github.io/doc/host/gitea.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-08 15:00:08 "},"doc/mini.html":{"url":"doc/mini.html","title":"spring-data-mybatis-mini极简ORM","keywords":"","body":"github地址 gitee地址 等同于spring data jdbc + mybatis 动态sql能力 大道至简 麻雀虽小 五脏俱全 抛弃繁琐的xml 只使用mybatis模版引擎即动态sql能力 sql写在markdown文件里 更容易书写和阅读 sql能统一管理查看 底层基于springJdbc 而不是mybatis 更直接纯粹 提供单表增删改(没有删除) 批量更新插入等基础方法 支持分页 多数据源 读写分离 mybatis最大优点就是sql模版引擎 我也有且仅有使用这部分功能(对于使用过mybatis的无学习成本) 但底层使用springJDBC 更简单直接 简化mybatis动态sql写法(可混用-写法还是mybatis那套) 比如 [@and id in idList] 等于 0\"> and id in #{item} == why not spring data jdbc,jpa,hibernate,mybaits,mybatis-plus等 基于spring data jdbc理念但扩展使用mybatis动态sql能力 对于复杂点查询支持更好 相比jpa 底层使用hibernate(当然也能sql) 只有sql 基于spring jdbc 无jpa根据方法名(复杂点需要你学习思考,名字老长,不透明) 简单没有黑魔法 学习成本低 sql写在markdown里,纯jdbc更易于调优 比价mybatis 没有cache,复杂join映射实体,无resultType,resultMap配置 扩展单表CRUD 只用他的动态sql能力的模版引擎和sql放到文件管理思想 去繁就简 取其优点抛弃鸡肋功能 相比mybatis-plus等扩展mybatis框架 他们做的越来越像hibernate,jpa 搞Criteria那套 基本脱离mybatis优点 查询只提供一个选择 就是sql写在markdown文件里 不会提供类似hibernate Criteria 多种选择说是灵活但项目多种有多种实现写法 你会有打人的冲动 缓存可以用SpringCache等上层方案 查询只能映射单一实体(VO,DO,DTO均可) 但现在推荐减少JOIN 推荐代码里join 后期会尝试写新的组件sqlHelper方式简化 == Getting Started 提供单表增删改(没有物理删除) 批量更新插入等基础方法 抛弃繁琐的xml 所有sql 写在markdown文件里 便于书写和阅读 默认位置sql包下repository接口名.md @ConfigLocation 可自定义位置 自定义更新 update/save/insert/delete 开头方法是更新操作 支持分页 分页参数必须是第一个参数 对于 \" > \",\" = \",\" \"无需转义(两边需有空格 我会自动替换转义) 提供if判断和in查询简写方式(偷懒 >- 注解属于spring data jpa 体系的 支持sql片段 [@sql XX] XX markdown文件XX名的sql片段 查询返回实体 不需要必须是DO 如果没特殊规范 也可直接返回VO层实体(抛弃繁琐的DO->DTO->VO 偷懒轻喷) 支持批量更新插入（jdbc链接参数需加入rewriteBatchedStatements=true&allowMultiQueries=true） 分页某些特性支持mysql,oracle 主支持mysql 使用简单 约定大于配置 默认配置基本都满足 支持LocalDateTime LocalTime jdk8更方便的时间类型 == 其他特性 无特殊需要可不用关心 分页 可自定义同名+Count的sql 优化分页 支持读写分离 根据业务逻辑添加@ReadDataSource在方法名上 默认配置多数据源随机取 可自定义 多数源支持但在微服务化潮流里尽量保证同一数据源 == 使用步骤基本同jpa,spring data jdbc 添加依赖 @EnableMybatisMini extends BaseRepository 或 extends BaseQueryRepository(只查询) 使用例子demo项目spring-data-mybatis-mini-demo Here is a quick teaser of an application using Spring Data Repositories in Java: === Maven configuration Add the Maven dependency: com.vonchange.common spring-data-mybatis-mini 2.2.3 org.springframework.data spring-data-commons org.springframework.boot spring-boot-starter-jdbc mysql mysql-connector-java 8.0.15 import org.springframework.data.mybatis.mini.jdbc.repository.query.ConfigLocation; import org.springframework.data.mybatis.mini.jdbc.repository.support.BaseRepository; import org.springframework.data.repository.query.Param; public interface UserBaseRepository extends BaseRepository { @ReadDataSource List findList(@Param(\"userName\") String userName, @Param(\"createTime\") Date createTime); Page findList(Pageable pageable, @Param(\"userName\") String userName,@Param(\"createTime\") Date createTime); String findUserName(@Param(\"userName\") String userName); List findListByIds(@Param(\"userName\") String userName, @Param(\"createTime\") Date createTime,@Param(\"idList\")List idList); int updateIsDelete(@Param(\"isDelete\") Integer isDelete,@Param(\"id\") Long id); } 默认sql 包下同名吧UserBaseRepository.md 识别```开头结尾的 -- 定义的同名方法 参见UserBaseRepository.md 实体类 定义ID 和TABLE 名 ``` import javax.persistence.Id; import javax.persistence.Table; @Data @Table(name = \"user_base\") public class UserBaseDO { @Id private Long id; private String userName; private String firstPhone; } @Service public class MyService { @Resource private final UserBaseRepository userBaseRepository; public void doWork() { List userBaseDOList = userBaseRepository.findList(\"test\",new Date()); } } //添加 EnableMybatisMini 注解 @EnableMybatisMini @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } > 偷懒简化 if test 和in查询 识别 {@开头 > \\[@and id in idList] 等于 0\"> and id in #{item} > \\[@and user_name <> userName] 等于 and user_name <> #{userName} ``` 3. in 查询List实体下的属性 \\[@and id in userList:id] 4. like ``` [@and user_name like userName] 等于 and user_name like CONCAT('%',?,'%') [@and user_name like userName%] 等于 and user_name like CONCAT(?,'%') [@and user_name like userName%] 等于 and user_name like CONCAT('%','test') ``` 5. 其他非4个分隔 ``` [@AND C.DESCRIPTION LIKE #{bean.description:like} or C.title like #{bean.description:like}] 等于 AND C.DESCRIPTION LIKE CONCAT('%',#{bean.description},'%') or C.title like CONCAT('%',#{bean.description},'%') [@AND content -> '$.account' = #{bean.account}] 等于 AND content -> '$.account' = #{bean.account} 6. \\[@sql XX] XX markdown文件XX名的sql片段 > 相关注解 1. @ColumnNot 非字段注解 2. InsertIfNull UpdateIfNull 插入或者更新为空时默认值 可使用函数 3. UpdateNotNull updateAllField方法NULL值忽略 4. ReadDataSource 指定某个方法读数据源 默认配置多数据源随机取 //自定义 读库数据源 不自定义默认所有你设置的数据源 @Bean public ReadDataSources initReadDataSources(){ return new ReadDataSources() { @Override public DataSource[] allReadDataSources() { return new DataSource[]{mainDataSource(),mainDataSource(),readDataSource()}; } }; } > 批量更新插入 1. jdbc链接参数需加入rewriteBatchedStatements=true&allowMultiQueries=true 2. insertBatch updateBatch方法 无需关心List对象大小 3. 经测试比插入比sql拼接 快5倍 但更新差不多 简单数据插入1万耗时2s多点 var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} ```html 作者: 小白鼠V 链接: https://vonchange.github.io/doc/mini.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-08 14:51:15 "}}