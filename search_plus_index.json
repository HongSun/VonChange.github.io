{"./":{"url":"./","title":"博客总揽","keywords":"","body":"简介 博客基本是笔者亲身学习实践经验总结,涉及到的知识点均亲身试验,但有时可能并未亲自确认,写的比较粗略,希望能及时反馈,避免更多人踩坑. 目录 spring-data-mybatis-mini极简ORM 闲置主机做开发服务器 搭建ubuntu server及其k8s 使用frp代理本地机器到公网 搭建gitlab并使用CICD部署HelloWorld 主要内容 闲置主机搭建双系统搭建ubuntu server并搭建单机k8s,gitlab实现简易版devops(CICD)做开发服务器 通过frp暴露到公网 可以随时随地提交代码并发布服务 用阿里云最便宜的服务器做中转(1cpu0.5g 突发即可 网络按使用 不到15/月) 而你本地主机却可以随时按需扩展和随时开关机不耗电费 作者闲置主机扩展到了24G内存 本身还有200多G固态 1T机械 按这配置1年正常起码至少得3000起 主机做服务器 显卡就鸡肋了 如果专门做服务器 买个垃圾显卡或者DIY 3000可以拥有很高的配置了 虽然需要你部署研究 但长久上 做开发,提供简单服务还是这个方案便宜 var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: http://www.vonchange.com/ 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-07-04 13:33:20 "},"doc/mini.html":{"url":"doc/mini.html","title":"spring-data-mybatis-mini极简ORM","keywords":"","body":"github地址 gitee地址 等同于spring data jdbc + mybatis 动态sql能力 大道至简 麻雀虽小 五脏俱全 抛弃繁琐的xml 只使用mybatis模版引擎即动态sql能力 sql写在markdown文件里 更容易书写和阅读 sql能统一管理查看 底层基于springJdbc 而不是mybatis 更直接纯粹 提供单表增删改(没有删除) 批量更新插入等基础方法 支持分页 多数据源 读写分离 mybatis最大优点就是sql模版引擎 我也有且仅有使用这部分功能(对于使用过mybatis的无学习成本) 但底层使用springJDBC 更简单直接 简化mybatis动态sql写法(可混用-写法还是mybatis那套) 比如 [@and id in idList] 等于 0\"> and id in #{item} == why not spring data jdbc,jpa,hibernate,mybaits,mybatis-plus等 基于spring data jdbc理念但扩展使用mybatis动态sql能力 对于复杂点查询支持更好 相比jpa 底层使用hibernate(当然也能sql) 只有sql 基于spring jdbc 无jpa根据方法名(复杂点需要你学习思考,名字老长,不透明) 简单没有黑魔法 学习成本低 sql写在markdown里,纯jdbc更易于调优 比价mybatis 没有cache,复杂join映射实体,无resultType,resultMap配置 扩展单表CRUD 只用他的动态sql能力的模版引擎和sql放到文件管理思想 去繁就简 取其优点抛弃鸡肋功能 相比mybatis-plus等扩展mybatis框架 他们做的越来越像hibernate,jpa 搞Criteria那套 基本脱离mybatis优点 查询只提供一个选择 就是sql写在markdown文件里 不会提供类似hibernate Criteria 多种选择说是灵活但项目多种有多种实现写法 你会有打人的冲动 缓存可以用SpringCache等上层方案 查询只能映射单一实体(VO,DO,DTO均可) 但现在推荐减少JOIN 推荐代码里join 后期会尝试写新的组件sqlHelper方式简化 == Getting Started 提供单表增删改(没有物理删除) 批量更新插入等基础方法 抛弃繁琐的xml 所有sql 写在markdown文件里 便于书写和阅读 默认位置sql包下repository接口名.md @ConfigLocation 可自定义位置 自定义更新 update/save/insert/delete 开头方法是更新操作 支持分页 分页参数必须是第一个参数 对于 \" > \",\" = \",\" \"无需转义(两边需有空格 我会自动替换转义) 提供if判断和in查询简写方式(偷懒 >- 注解属于spring data jpa 体系的 支持sql片段 [@sql XX] XX markdown文件XX名的sql片段 查询返回实体 不需要必须是DO 如果没特殊规范 也可直接返回VO层实体(抛弃繁琐的DO->DTO->VO 偷懒轻喷) 支持批量更新插入（jdbc链接参数需加入rewriteBatchedStatements=true&allowMultiQueries=true） 分页某些特性支持mysql,oracle 主支持mysql 使用简单 约定大于配置 默认配置基本都满足 支持LocalDateTime LocalTime jdk8更方便的时间类型 == 其他特性 无特殊需要可不用关心 分页 可自定义同名+Count的sql 优化分页 支持读写分离 根据业务逻辑添加@ReadDataSource在方法名上 默认配置多数据源随机取 可自定义 多数源支持但在微服务化潮流里尽量保证同一数据源 == 使用步骤基本同jpa,spring data jdbc 添加依赖 @EnableMybatisMini extends BaseRepository 或 extends BaseQueryRepository(只查询) 使用例子demo项目spring-data-mybatis-mini-demo Here is a quick teaser of an application using Spring Data Repositories in Java: === Maven configuration Add the Maven dependency: com.vonchange.common spring-data-mybatis-mini 2.3.4 org.springframework.data spring-data-commons org.springframework.boot spring-boot-starter-jdbc mysql mysql-connector-java 8.0.15 import org.springframework.data.mybatis.mini.jdbc.repository.query.ConfigLocation; import org.springframework.data.mybatis.mini.jdbc.repository.support.BaseRepository; import org.springframework.data.repository.query.Param; public interface UserBaseRepository extends BaseRepository { @ReadDataSource List findList(@Param(\"userName\") String userName, @Param(\"createTime\") Date createTime); Page findList(Pageable pageable, @Param(\"userName\") String userName,@Param(\"createTime\") Date createTime); String findUserName(@Param(\"userName\") String userName); List findListByIds(@Param(\"userName\") String userName, @Param(\"createTime\") Date createTime,@Param(\"idList\")List idList); int updateIsDelete(@Param(\"isDelete\") Integer isDelete,@Param(\"id\") Long id); } 默认sql 包下同名吧UserBaseRepository.md 识别```开头结尾的 -- 定义的同名方法 参见UserBaseRepository.md 实体类 定义ID 和TABLE 名 ``` import javax.persistence.Id; import javax.persistence.Table; @Data @Table(name = \"user_base\") public class UserBaseDO { @Id private Long id; private String userName; private String firstPhone; } @Service public class MyService { @Resource private final UserBaseRepository userBaseRepository; public void doWork() { List userBaseDOList = userBaseRepository.findList(\"test\",new Date()); } } //添加 EnableMybatisMini 注解 @EnableMybatisMini @SpringBootApplication public class DemoApplication { public static void main(String[] args) { SpringApplication.run(DemoApplication.class, args); } } > 偷懒简化 if test 和in查询 识别 {@开头 > \\[@and id in idList] 等于 0\"> and id in #{item} > \\[@and user_name <> userName] 等于 and user_name <> #{userName} ``` 3. in 查询List实体下的属性 \\[@and id in userList:id] 4. like ``` [@and user_name like userName] 等于 and user_name like CONCAT('%',?,'%') [@and user_name like userName%] 等于 and user_name like CONCAT(?,'%') [@and user_name like userName%] 等于 and user_name like CONCAT('%','test') ``` 5. 其他非4个分隔 ``` [@and id in #{idList:in} and user_name like #{userName:like}] 等于 and id in #{item} and user_name like CONCAT('%',#{userName},'%') [@AND content -> '$.account' = #{bean.account}] 等于 AND content -> '$.account' = #{bean.account} 6. \\[@sql XX] XX markdown文件XX名的sql片段 > 相关注解 1. @ColumnNot 非字段注解 2. InsertIfNull UpdateIfNull 插入或者更新为空时默认值 可使用函数 3. UpdateNotNull updateAllField方法NULL值忽略 4. ReadDataSource 指定某个方法读数据源 默认配置多数据源随机取 //自定义 读库数据源 不自定义默认所有你设置的数据源 @Bean public ReadDataSources initReadDataSources(){ return new ReadDataSources() { @Override public DataSource[] allReadDataSources() { return new DataSource[]{mainDataSource(),mainDataSource(),readDataSource()}; } }; } > 批量更新插入 1. jdbc链接参数需加入rewriteBatchedStatements=true&allowMultiQueries=true 2. 提供insertBatch(默认第一行不为NULL的字段) 可在markdown里自定义sql 无需关心List对象大小 3. 经测试简单数据插入1万耗时1s以内 4. 自定义实现(建议使用 更透明) @BatchUpdate(size = 5000) int batchInsert(List list); 只需定义单条insert 语句 -- batchInsert insert into user_base(user_name,mobile_phone,create_time) values (#{userName},#{mobilePhone},#{createTime}) > 大数据量流式读取 1. 使用场景: 不用编写复杂分包逻辑,表数据大小,可关联表查 可直接 select * from 整个表 不用关心内存爆调 流的方式读取 2. 使用例子 > 定义方法 void findBigData(@Param(\"\")AbstractPageWork abstractPageWork,@Param(\"userName\") String userName); > 定义sql -- findBigData select * from user_base [@and user_name like userName] > 使用demo AbstractPageWork abstractPageWork = new AbstractPageWork() { @Override protected void doPage(List pageContentList, int pageNum, Map extData) { pageContentList.forEach(userBaseDO -> { log.info(\"{}\",userBaseDO.toString()); }); } @Override protected int getPageSize() { return 500; } }; userBaseRepository.findBigData(abstractPageWork,\"三\"); log.info(\"{} {} {}\",abstractPageWork.getSize(),abstractPageWork.getTotalPages(),abstractPageWork.getTotalElements()); var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} ```html 作者: 小白鼠V 链接: http://www.vonchange.com/doc/mini.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-07-04 13:46:45 "},"doc/host.html":{"url":"doc/host.html","title":"闲置主机做开发服务器","keywords":"","body":"搭建教程均采用docker k8s安装 需要一定的容器基础 搭建ubuntu server及其k8s 搭建gitlab并使用CICD部署HelloWorld 使用frp代理本地机器到公网 gitea替换gitlab部署CICD var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: http://www.vonchange.com/doc/host.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-12 17:47:39 "},"doc/host/ubuntu.html":{"url":"doc/host/ubuntu.html","title":"搭建ubuntu server及其k8s","keywords":"","body":"搭建ubuntu server及其k8s 搭建ubuntu server 参考: https://www.jianshu.com/p/da49cd69e8ff 我已经安装过了 没留啥文档 基本按照安装ubuntu server参考安装即可 这里只说自己踩过的坑 我安装的版本是 ubuntu server 16.04.6 安装语言必须选择English 也就是第一个安装界面 但在 \"Welcome\" 语言选择界面可以选择中文(只是安装界面的语言) 但第一个我尝试过选择中文 是有问题 当然能力足够最好都选择英文 双系统 磁盘分区选择手动 选择一个你预备好的非系统ntfs盘(在win10里最好格式化过) 删除此分区变为空闲分区 选择该空闲分区自动分区 确定执行 搭建 本地k8s准备工作 必须安装了ssh 安装的ubuntu的时候可选 没选也简单 自己安装即可 sudo ps -e |grep ssh # 查看时候安装过 apt-get update apt-get install openssh-server # 不存在 安装 必须创建root用户 sudo passwd root # 设置root的密码 su root #来测试是否可以进入root用户，如果出现#说明已经设置root用户的密码成功 必须设置ssh root用户可以登录(默认没有开启) # 其配置在 sshd_config文件中，进行编辑： vi /etc/ssh/sshd_config #找到PermitRootLogin 添加一行 PermitRootLogin yes，如下： # Authentication: #LoginGraceTime 2m #PermitRootLogin prohibit-password PermitRootLogin yes #StrictModes yes #MaxAuthTries 6 #MaxSessions 10 #保存退出后，重启ssh服务，输入命令： /etc/init.d/ssh restart ifconfig 查看ip 这里推荐使用secureCRT(secureFX) ssh root登录 准备就绪 可以安装k8s了 搭建 本地k8s（懒人法) 搭建k8s网上有多种 比如kubeadmin 但因为墙的问题 需要爬许多坑 这里推荐使用：kubeasz 里面文档也很丰富清晰，对于初学者来说很有帮助。最主要的是不需要翻墙 我主要拿 主机做开发服务器 只有一个服务器 也就是只有master 所以选择最简单的 单机快速体验k8s集群的测试环境--AllinOne部署 安装上面教程安装即可 很简单 但前提必须ssh root能登录(没开之前 老是安装不上) 还有先不要着急安装 我安装后发现一个问题 [使用2.0.3版本后，在dashboard中看不到CPU、MEM]https://github.com/easzlab/kubeasz/issues/666 在教程AllinOne部署2.下载文件后 在服务器上提前在roles/kube-node/templates/kubelet-config.yaml.j2文件中把 readOnlyPort: 0 改成 readOnlyPort: 10255 再执行部署 现在你已经安装好了k8s 可以动手各种kubectl命令 好记性不如烂笔头 可以动手学习k8s还有docker 配置docker镜像加速 var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: http://www.vonchange.com/doc/host/ubuntu.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-06-11 06:29:06 "},"doc/host/frp.html":{"url":"doc/host/frp.html","title":"使用frp代理本地机器到公网","keywords":"","body":"使用frp代理本地机器到公网 首先购买一个最最便宜的服务器 突发性能即可(双十一大优惠更好) (我安装的是CentOS 7.2 网络按流量) 安装docker 网上教程很多 比如:https://www.jianshu.com/p/781da23f1b37 #!/bin/sh docker ps if [ $? -eq 127 ];then #docker not found yum update -y yum install yum-utils device-mapper-persistent-data lvm2 -y yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo yum install conntrack-tools -y yum install docker-ce-18.09.1 -y systemctl start docker systemctl enable docker fi docker ps 配置镜像加速 镜像加速教程 阿里云镜像加速 sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json 服务器安装 frps server -- 先/home/app/ 下弄好配置文件 docker run --restart=unless-stopped --net=host -v /home/app/frps:/var/frp/conf --name frps -d registry.cn-hangzhou.aliyuncs.com/change_public/frps:2.0 这里直接使用 host 方式 共享主机网路 不用每次接口暴露需要修改 配置文件 frps文件夹下 frps.ini [common] bind_addr = 0.0.0.0 bind_port = 7000 kcp_bind_port = 7000 vhost_http_port = 8099 vhost_https_port = 9443 dashboard_addr = 0.0.0.0 dashboard_port = 7500 dashboard_user = admin dashboard_pwd = ?你的密码 authentication_timeout = 0 subdomain_host = frp.?.com 端口8099 或这tcp端口等需在阿里云安全组里添加映射 本地安装 frpc client docker run -d \\ --net=host \\ --name frpc \\ --restart unless-stopped \\ -v /home/?/data/frpc/config:/var/frp/conf \\ registry.cn-hangzhou.aliyuncs.com/change_public/frpc:1.0 配置demo 其他配置详情请参考frp文档 ```angular2html [common] server_addr = frp.vonchange.com server_port = 7000 admin_addr = 127.0.0.1 admin_port = 7400 admin_user = admin admin_pwd = ？ [web_gitlab] type=http local_ip = 127.0.0.1 local_port = 8099 subdomain = gitlab [ssh_gitlab] type=tcp local_ip = 127.0.0.1 local_port = 6022 remote_port = 6022 subdomain = gitlab [web_k8s] type=https local_ip = 127.0.0.1 local_port = 26751 subdomain = k8s > 这里 你就可以通过域名访问 你本地的服务做需要大量资源的微服务开发或者其他(个人云存储等) var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} ```html 作者: 小白鼠V 链接: http://www.vonchange.com/doc/host/frp.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-07-01 05:53:23 "},"doc/host/gitlab-ci.html":{"url":"doc/host/gitlab-ci.html","title":"搭建gitlab并使用CICD部署HelloWorld","keywords":"","body":"搭建gitlab并使用CICD部署HelloWorld 搭建gitlab 购买一个域名 不备案也可以 最好备案了 docker run --detach \\ --hostname gitlab.frp.?.com \\ --env GITLAB_OMNIBUS_CONFIG=\"external_url 'http://gitlab.frp.?.com:8099/'; gitlab_rails['gitlab_shell_ssh_port'] = 6022;gitlab_rails['gitlab_port'] = 8099;\" \\ --publish 443:443 --publish 8099:8099 --publish 6022:22 \\ --name gitlab \\ --restart always \\ --volume /home/?/data/gitlab/:/etc/gitlab \\ --volume /home/?/data/gitlab/log:/var/log/gitlab \\ --volume /home/?/data/gitlab/data:/var/opt/gitlab \\ gitlab/gitlab-ce:11.8.1-ce.0 ssh 用6022 http 使用8099 非80端口 当然网站备案了也可以用80端口 hostname 使用你购买的域名 比如 gitlab.frp.?.cn 命令的？ 号是你要替换的域名,volume 需要你自定义你的映射本地地址 方向代理后的最终地址为 gitlab.frp.?.cn:8099 可以先看使用frp代理本地机器到公网教程后在 回来学习下面CI教程 root 进入gitlab 页面 http://gitlab.frp.?.com/admin/runners 部署gitlab-runner docker run -d --name gitlab-runner --restart always \\ -v /home/?/data/gitlab-runner/config:/etc/gitlab-runner \\ -v /run/docker.sock:/var/run/docker.sock \\ gitlab/gitlab-runner:latest 注册 docker exec -it gitlab-runner gitlab-ci-multi-runner register 根据你的地址和token 注册 选择docker方式(企业级应当kubernetes shell等基本过时的废物不要用) Please enter the gitlab-ci coordinator URL: http://?.com/ Please enter the gitlab-ci token for this runner: ? Please enter the gitlab-ci description for this runner: commonh-runner Please enter the gitlab-ci tags for this runner (comma separated): common Whether to run untagged builds [true/false]: true Please enter the executor: docker, parallels, shell, kubernetes, docker-ssh, ssh, virtualbox, docker+machine, docker-ssh+machine: docker Please enter the default Docker image (e.g. ruby:2.1): registry.cn-hangzhou.aliyuncs.com/xianbei_jdk/centos_jdk8:v1.2 配置可以不需要tag 运行 修改/home/?/data/gitlab-runner/config 下config.toml 配置maven npm缓存 地址可以改成本地的url [[runners]] name = \"common\" url = \"http://192.168.0.?:8099/\" token = \"?\" executor = \"docker\" [runners.custom_build_dir] [runners.cache] [runners.cache.s3] [runners.cache.gcs] [runners.docker] tls_verify = false image = \"registry.cn-hangzhou.aliyuncs.com/xianbei_jdk/centos_jdk8:v1.2\" privileged = false disable_entrypoint_overwrite = false oom_kill_disable = false disable_cache = false volumes = [\"/root/.npm:/root/.npm\", \"/root/.ssh:/root/.ssh\", \"/root/.sonar:/root/.sonar\", \"/root/.m2:/root/.m2\", \"/root/deploy:/root/deploy\", \"/var/run/docker.sock:/var/run/docker.sock\", \"/cache\"] pull_policy = \"if-not-present\" shm_size = 0 部署helloworld 项目下添加.gitlab-ci.yml 参考项目 https://github.com/VonChange/deploy-file https://github.com/VonChange/hello-world master分支是 deploy-file项目把通用文件放到gitlab-runner挂载文件夹内 做到部署配置通用 all-in-code 是配置在同一项目内 可参考 不推荐使用 var targetUl = document.getElementsByClassName('page-inner')[0].getElementsByTagName('ul')[0];if(targetUl.getElementsByTagName('a').length>0){targetUl.className='toc';} 作者: 小白鼠V 链接: http://www.vonchange.com/doc/host/gitlab-ci.html 来源: 小白鼠V技术驿站 本文原创发布于「小白鼠V技术驿站」,转载请注明出处,谢谢合作! © vonchange all right reserved，powered by Gitbook文件修订时间: 2020-07-04 13:41:02 "}}